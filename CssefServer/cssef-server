#!/usr/bin/python
import sys
from cssefserver import CssefServer

class ParseInput(object):
    def __init__(self, input_list):
        self.remaining_args = input_list
        self.options = {}
        self.command = []
        self.command_args = {}
        self.parse_input()

    def parse_input(self):
        self.parse_command()
        self.parse_command_args()

    def parse_options(self):
        index = 0
        while index < len(self.remaining_args) and self.remaining_args[index][0] == '-':
            argument = self.remaining_args[index]
            argument = argument.strip('-')
            if len(argument.split("=")) > 1:
                # The value is in the same argument
                keyword = argument.split('=')[0]
                value = argument.split('=')[1]
            else:
                # The value is in the next argument
                keyword = argument
                value = self.remaining_args[index + 1]
                index += 1
            self.options[keyword] = value
            index += 1
        self.remaining_args = self.remaining_args[index:]

    def parse_command(self):
        index = 0
        while index < len(self.remaining_args) and self.remaining_args[index][0] != '-':
            self.command.append(self.remaining_args[index])
            index += 1
        self.remaining_args = self.remaining_args[index:]

    def parse_command_args(self):
        index = 0
        while index < len(self.remaining_args) and self.remaining_args[index][0] == '-':
            argument = self.remaining_args[index]
            argument = argument.strip('-')
            if len(argument.split("=")) > 1:
                # The value is in the same argument
                keyword = argument.split('=')[0].replace('-', '_')
                value = argument.split('=')[1]
            else:
                # The value is in the next argument
                keyword = argument.replace('-', '_')
                try:
                    value = self.remaining_args[index + 1]
                except IndexError:
                    # There is no next error. Complain and quit
                    sys.exit("Expected value in for argument, but got none.")
                index += 1
            self.command_args[keyword] = value
            index += 1

def exit_help():
    print "Usage: %s [options]" % sys.argv[0]
    sys.exit(2)

if __name__ == "__main__":
    # Parse the user input. Make sure a command was provided and that it is
    # one of the available commands
    user_input = ParseInput(sys.argv[1:])
    if len(user_input.command) < 0:
        exit_help()

    server = CssefServer(user_input.command_args)
    # The configuration loading process is tricky, since settings provided at
    # runtime may dictate how we load other configurations. Load the runtime
    # configurations, and then load the configurations from the file. We load
    # the runtime configurations again to reset any configurations that may have
    # been overwritten while loading from the file.

    # 1: Load the runtime configurations
    # 2: Load the file configurations
    # 3: Load the runtime configurations again
    server.config.load_settings_dict(user_input.command_args)
    server.config.load_settings_file("/etc/cssef/cssef-server.yml")
    server.config.load_settings_dict(user_input.command_args)
    # Now start the server
    server.start()