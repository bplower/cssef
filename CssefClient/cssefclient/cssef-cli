#!/usr/bin/python
import sys
import traceback
from prettytable import PrettyTable
from cssefclient.cssefclient import *

class Help(object):
	def __init__(self, availableMenu):
		self.availableMenu = availableMenu

	def execute(self):
		returnString = ""
		for i in self.availableMenu:
			returnString += "Module: %s\n" % i
			for k in self.availableMenu[i]:
				try:
					arguments = ""
					for j in self.availableMenu[i][k]['arguments']:
						arguments += j['argument'] + ", "
					returnString += "Endpoint: %s (%s)\n" % (k, arguments)
				except KeyError:
					returnString += "Menu: %s\n" % k
			returnString += "\n"

		returnDict = {}
		returnDict['value'] = 0
		returnDict['content'] = returnString
		return returnDict

class ArgumentParser(object):
	def __init__(self, inputList):
		self.inputList = inputList
		self.rawArguments = []
		self.command = None
		self.arguments = self.parseArguments()

	def parseCommand(self, menuDict, apiConn):
		i = 0
		argString = ""
		currentDict = menuDict
		while i < len(self.inputList) and self.inputList[i][0] != '-':
			currentDict = currentDict[self.inputList[i]]
			i+=1
		if currentDict == menuDict:
			# This means the selected menu hasn't changed. There was no input
			self.command = Help(currentDict)
		else:
			self.command = CeleryEndpoint.fromDict(currentDict, apiConn)

	def parseArguments(self):
		i = 0
		argumentsDict = {}
		while i < len(self.inputList) and self.inputList[i][0] != '-':
			i += 1
		while i < len(self.inputList) and self.inputList[i][0] == '-':
			# Strip the dashes off the front of the keyword
			if self.inputList[i][:2] == '--':
				key = self.inputList[i][2:]
			else:
				key = self.inputList[i][1:]
			# Determine of the value is in the same element
			if '=' in key:
				value = key.split('=')[1]
				key = key.split('=')[0]
				i += 1
			else:
				value = self.inputList[i + 1]
				i += 2
			argumentsDict[key] = value
		if argumentsDict == {}:
			return None
		else:
			return argumentsDict

	def execute(self):
		try:
			if self.arguments:
				output = self.command.execute(**self.arguments)
			else:
				output = self.command.execute()
		except Exception as e:
			output = {"value": -1, "message": [str(e)]}
		return output

class Menu(object):
	def __init__(self):
		self.availableEndpoints = None
		self.menuDict = {}

	def loadFromServer(self, apiConn):
		result = AvailableEndpoints(apiConn).execute()
		if result['value'] != 0:
			print "Failed to get available endpoints"
			sys.exit()
		self.availableEndpoints = result['content']

	def loadFromFile(self, path):
		pass

	def construct(self):
		for moduleDict in self.availableEndpoints:
			self.menuDict[moduleDict['menuName']] = {}
			for endpointDict in moduleDict['endpoints']:
				self.menuDict[moduleDict['menuName']] = self.buildMenuBranch(
					self.menuDict[moduleDict['menuName']],	# This is the current menu
					endpointDict['menu'],					# This is the menu heiarchy
					endpointDict)							# This is the content for the end of the menu

	def buildMenuBranch(self, currentMenu, menuList, endpointContent):
		if len(menuList) == 1:
			currentMenu[menuList[0]] = endpointContent
			return currentMenu
		else:
			try:
				currentMenu[menuList[0]] = self.buildMenuBranch(currentMenu[menuList[0]], menuList[1:], endpointContent)
			except KeyError:
				currentMenu[menuList[0]] = {}
				currentMenu[menuList[0]] = self.buildMenuBranch(currentMenu[menuList[0]], menuList[1:], endpointContent)
			return currentMenu

def displayOutput(outputDict):
	if outputDict['value'] != 0:
		sys.stderr.write("The server encountered an error:\n")
		sys.stderr.write("\n".join(outputDict['message'])+"\n")
		sys.exit(outputDict['value'])
	if len(outputDict['content']) > 0:
		if output['content'].__class__.__name__ == "list":
			outputTable = PrettyTable(output['content'][0].keys())
			outputTable.padding_width = 1
			for i in outputDict['content']:
				outputTable.add_row(i.values())
			print outputTable
		elif output['content'].__class__.__name__ == "str":
			print output['content']
		else:
			print "Unknown outputDict content type: %s" % str(output['content'].__class__.__name__)

if __name__ == "__main__":
	# cli format:
	# ./cssef-cli [COMMAND] [ARGUMENTS]
	config = Configuration('/etc/cssef/cssef.conf')
	apiConn = getConn(config)

	m = Menu()
	m.loadFromServer(apiConn)
	m.construct()

	a = ArgumentParser(sys.argv[1:])
	a.parseCommand(m.menuDict, apiConn)
	output = a.execute()

	displayOutput(output)