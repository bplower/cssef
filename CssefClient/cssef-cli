#!/usr/bin/python
import os
import sys
import cssefclient
from cssefclient.utils import RPCEndpoint
from cssefclient.errors import NonExistantCommand

class Menu(object):
    def __init__(self, config, source_list):
        self.config = config
        self.source_list = source_list
        self.menu_dict = {}

    def construct(self):
        # Start by looping over the endpoint sources
        for source in self.source_list:
            for endpoint in source['endpoints']:
                self.menu_dict[endpoint['menu_path']] = \
                RPCEndpoint(self.config, endpoint['rpc_name'])

    def get_command(self, command_list):
        """Gets the selected command from the menu dictionary

        This converts the command_list to a string and then looks it up in the
        menu_dict to find the command instance.

        Args:
            command_list (list): List of menu names to traverse

        Returns:
            Command: Instantiated command class, which can be called to
                execute the rpc endpoint
        """
        menu_path = ".".join(command_list)
        try:
            return self.menu_dict[menu_path]
        except KeyError:
            print menu_path
            raise NonExistantCommand

class ParseInput(object):
    def __init__(self, input_list):
        self.remaining_args = input_list
        self.options = {}
        self.command = []
        self.command_args = {}
        self.parse_input()

    def parse_input(self):
        self.parse_options()
        self.parse_command()
        self.parse_command_args()

    def parse_options(self):
        index = 0
        while index < len(self.remaining_args) and self.remaining_args[index][0] == '-':
            argument = self.remaining_args[index]
            argument = argument.strip('-')
            if len(argument.split("=")) > 1:
                # The value is in the same argument
                keyword = argument.split('=')[0]
                value = argument.split('=')[1]
            else:
                # The value is in the next argument
                keyword = argument
                value = self.remaining_args[index + 1]
                index += 1
            self.options[keyword] = value
            index += 1
        self.remaining_args = self.remaining_args[index:]

    def parse_command(self):
        index = 0
        while index < len(self.remaining_args) and self.remaining_args[index][0] != '-':
            self.command.append(self.remaining_args[index])
            index += 1
        self.remaining_args = self.remaining_args[index:]

    def parse_command_args(self):
        index = 0
        while index < len(self.remaining_args) and self.remaining_args[index][0] == '-':
            argument = self.remaining_args[index]
            argument = argument.strip('-')
            if len(argument.split("=")) > 1:
                # The value is in the same argument
                keyword = argument.split('=')[0].replace('-', '_')
                value = argument.split('=')[1]
            else:
                # The value is in the next argument
                keyword = argument.replace('-', '_')
                try:
                    value = self.remaining_args[index + 1]
                except IndexError:
                    # There is no next error. Complain and quit
                    sys.exit("Expected value in for argument, but got none.")
                index += 1
            self.command_args[keyword] = value
            index += 1

if __name__ == "__main__":
    # Set up and configure the client
    user_input = ParseInput(sys.argv[1:])
    client = cssefclient.CssefClient()
    client.config.load_config_file(client.config.global_config_path)
    client.config.load_config_file(client.config.user_config_path)
    client.config.load_config_dict(user_input.options)
    client.config.load_token()

    # Make the initial connection to the server
    client.connect()

    # Prepare our authentication object
    if not client.load_auth():
        # There was incomplete data for authentication
        sys.exit()
    # We have to do this because there isn't a better way yet
    user_input.command_args['auth'] = client.auth.as_dict()

    # Ensure user data directory exists
    if not os.path.exists(client.config.user_data_dir):
        os.makedirs(client.config.user_data_dir)

    # Retrieve the raw endpoint data. This will load from either the cache or
    # the server, depending on the the configurations
    client.load_endpoints()

    # Now convert the raw endpoint data into a meaningful menu list that the
    # user input can be compared against.
    commandMenu = Menu(client.config, client.endpoint_sources)
    commandMenu.construct()

    # Initialize the command object
    command = commandMenu.get_command(user_input.command)
    # Execute the command, passing the arguments to the server
    output_obj = command.execute(client.server_connection, **user_input.command_args)
    # Handle the return message object
    print output_obj
    sys.exit(output_obj.value)
